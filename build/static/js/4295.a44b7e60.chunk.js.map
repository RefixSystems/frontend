{"version":3,"file":"static/js/4295.a44b7e60.chunk.js","mappings":"mLAEA,MAsDA,EAtDmBA,IACjB,MAAM,MACJC,EAAK,KACLC,EAAI,GACJC,EAAE,KACFC,EAAI,YACJC,EAAW,QACXC,EAAO,eACPC,EAAc,MACdC,EAAK,SACLC,EAAQ,OACRC,EAAM,SACNC,EAAQ,UACRC,EAAS,GACTC,EAAE,GACFC,EAAE,IACFC,EAAG,GACHC,EAAE,GACFC,EAAE,WACFC,EAAU,KACVC,EAAI,IACJC,EAAG,OACHC,GACErB,EACJ,OACEsB,EAAAA,EAAAA,MAACC,EAAAA,EAAKC,MAAK,CAAAC,SAAA,EACTH,EAAAA,EAAAA,MAACC,EAAAA,EAAKG,MAAK,CAACpB,QAASA,EAASM,UAAWL,EAAekB,SAAA,CACrDxB,GACD0B,EAAAA,EAAAA,KAAA,QAAMf,UAAS,eAAAgB,OAA0B,SAATT,EAAe,KAAAS,OAAQT,GAAS,IAAKM,SAAC,UAIxEE,EAAAA,EAAAA,KAACJ,EAAAA,EAAKM,QAAO,CACX3B,KAAMA,EACNC,GAAIA,EACJC,KAAMA,EACNC,YAAaA,EACbG,MAAOA,EACPC,SAAUA,EACVC,OAAQA,EACRC,SAAUA,EACVC,UAAWA,EACXC,GAAIA,EACJC,GAAIA,EACJC,IAAKA,EACLC,GAAIA,EACJC,GAAIA,EACJG,IAAKA,EACLC,OAAc,OAANA,QAAM,IAANA,EAAAA,EAAU,KAEnBH,IACU,C,oJCnDV,MAAMY,EAAkBC,EAAAA,KAAaC,MAAM,CAChDC,SAAUF,EAAAA,KACPG,WAAW1B,GAAUA,EAAM2B,SAC3BC,SAAS,YACTC,KAAK,WAAY,kBAAmB7B,GACd,mDAED6B,KAAK7B,IADJ,WAC2B6B,KAAK7B,KAEtD6B,KACC,mBACA,0CACC7B,IACK,WAAW6B,KAAK7B,IACM,KAAjBA,EAAM8B,SAMrBC,SAAUR,EAAAA,KACPG,WAAW1B,GAAUA,EAAM2B,SAC3BC,SAAS,yBACTI,IAAI,EAAG,8C,qECbZ,MAiLA,EAjLcC,KACZ,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,GAC3CC,GAAUC,EAAAA,EAAAA,OACTC,GAAU,UAAEC,KAAeC,EAAAA,EAAAA,MAO5BC,EAAeA,KACnBP,GAAiBD,EAAa,EAuBhC,OACEf,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CACRC,OAAK,EACLxC,UAAU,sFACVyC,MAAO,CAAEC,SAAU,UAAW7B,UAE9BH,EAAAA,EAAAA,MAACiC,EAAAA,EAAG,CAAC3C,UAAU,4CAA2Ca,SAAA,EACxDE,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CACFC,GAAI,GACJ3C,GAAI,EACJD,GAAI,EACJG,GAAI,EACJJ,UAAU,6CAA4Ca,UAEtDE,EAAAA,EAAAA,KAAA,OACEf,UAAU,yIACV8C,IAAKC,EAAAA,EACLC,IAAI,kBACJC,MAAM,kBACNR,MAAO,CAAES,OAAQ,QAASC,MAAO,cAIrCpC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CACFC,GAAI,GACJ3C,GAAI,GACJD,GAAI,EACJG,GAAI,EACJJ,UAAU,gEAA+Da,UAEzEH,EAAAA,EAAAA,MAACiC,EAAAA,EAAG,CAAC3C,UAAU,0FAAyFa,SAAA,EACtGH,EAAAA,EAAAA,MAACkC,EAAAA,EAAG,CAAC5C,UAAU,+DAA8Da,SAAA,EAC3EE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,WACJE,EAAAA,EAAAA,KAAA,KAAGf,UAAU,6BAA4Ba,SAAC,gDAI5CE,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAA/B,UACFE,EAAAA,EAAAA,KAACqC,EAAAA,GAAM,CACLC,cApEQ,CACpBhC,SAAU,GACVM,SAAU,IAmEE2B,iBAAkBpC,EAClBqC,SAAUA,CAACC,EAAMC,KAAyB,IAAvB,cAAEC,GAAeD,EA7D9BE,WAClB,MAAM,SAAEtC,EAAQ,SAAEM,GAAa6B,EAE/B,IACE,MAAMI,QAAiBzB,EAAS,CAC9Bd,WACAM,aAEmB,IAADkC,EAIbC,EAJK,OAARF,QAAQ,IAARA,GAAAA,EAAUG,MACZC,EAAAA,GAAMC,QAAgB,OAARL,QAAQ,IAARA,GAAc,QAANC,EAARD,EAAUG,YAAI,IAAAF,OAAN,EAARA,EAAgBK,QAAS,CAAEC,UAAW,MAEpDlC,EAAQ,qBAER+B,EAAAA,GAAMI,MAAc,OAARR,QAAQ,IAARA,GAAe,QAAPE,EAARF,EAAUQ,aAAK,IAAAN,OAAP,EAARA,EAAiBC,KAAKK,MAAO,CAAED,UAAW,KAE1D,CAAE,MAAOC,GACPC,QAAQD,MAAMA,EAChB,GA6CcE,CAAYd,GACZE,GAAc,EAAM,EACpB7C,SAED0D,IAAA,IAAC,OACAf,EAAM,OACNgB,EAAM,QACNC,EAAO,aACPC,EAAY,WACZC,EAAU,aACVC,EAAY,aACZC,GACDN,EAAA,OACC7D,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHX,UAAU,4CACVuD,SAAUqB,EAAa/D,SAAA,EAEvBE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAG,CAAA9B,UACFE,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACC,GAAI,GAAGhC,UACVE,EAAAA,EAAAA,KAAC+D,EAAAA,EAAS,CACRpF,QAAQ,WACRL,MAAM,qBACNC,KAAK,WACLE,KAAK,WACLD,GAAG,WACHE,YAAY,gCACZO,UAAS,gBAAAgB,OACPyD,EAAQpD,UAAYmD,EAAOnD,SAAW,aAAe,IAEvDxB,SAAU6E,EACV5E,OAAQ6E,EACRrE,WACEmE,EAAQpD,UAAYmD,EAAOnD,UACzBN,EAAAA,EAAAA,KAAA,KAAGf,UAAU,cAAaa,SAAE2D,EAAOnD,WAEnC,UAMVN,EAAAA,EAAAA,KAAC4B,EAAAA,EAAG,CAAC3C,UAAU,OAAMa,UACnBE,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACC,GAAI,GAAGhC,UACVH,EAAAA,EAAAA,MAACC,EAAAA,EAAKG,MAAK,CAACpB,QAAQ,WAAUmB,SAAA,CAAC,YACrBE,EAAAA,EAAAA,KAAA,QAAMf,UAAU,cAAaa,SAAC,cAI5CE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAG,CAAC3C,UAAU,qDAAoDa,UACjEH,EAAAA,EAAAA,MAACkC,EAAAA,EAAG,CAAC5C,UAAU,yDAAwDa,SAAA,EACrEE,EAAAA,EAAAA,KAACJ,EAAAA,EAAKM,QAAO,CACX3B,KAAK,WACLE,KAAMsC,EAAe,OAAS,WAC9BiD,KAAK,KACLxF,GAAG,WACHE,YAAY,sBACZO,UAAS,kCAAAgB,OACPyD,EAAQ9C,UAAY6C,EAAO7C,SACvB,gBACA,IAEN9B,SAAU6E,EACV5E,OAAQ6E,KAEV5D,EAAAA,EAAAA,KAAA,OACEf,UAAU,gCACVgF,QAAS1C,EAAazB,SAErBiB,GACCf,EAAAA,EAAAA,KAACkE,EAAAA,IAAY,KAEblE,EAAAA,EAAAA,KAACmE,EAAAA,IAAqB,WAK7BT,EAAQ9C,UAAY6C,EAAO7C,UAC1BZ,EAAAA,EAAAA,KAAA,KAAGf,UAAU,cAAaa,SAAE2D,EAAO7C,WAEnC,IAGFZ,EAAAA,EAAAA,KAACoE,EAAAA,EAAW,CACVnF,UAAU,OACVoF,QAAS,UACT5F,KAAK,SACLO,SAAU8E,EACVzC,UAAWA,EACX/C,MAAO,YAEJ,eAOT,C","sources":["components/TextInput.js","pages/Admin/LoginForms/LoginValidation.js","pages/Admin/LoginForms/Login.js"],"sourcesContent":["import React from 'react';\nimport { Form } from 'react-bootstrap';\nconst TextInput = (props) => {\n  const {\n    label,\n    name,\n    id,\n    type,\n    placeholder,\n    htmlFor,\n    lableClassName,\n    value,\n    onChange,\n    onBlur,\n    disabled,\n    className,\n    lg,\n    md,\n    xxl,\n    xl,\n    sm,\n    validation,\n    star,\n    ref,\n    accept,\n  } = props;\n  return (\n    <Form.Group>\n      <Form.Label htmlFor={htmlFor} className={lableClassName}>\n        {label}\n        <span className={`text-danger ${star === 'none' ? `d-${star}` : ''}`}>\n          *\n        </span>\n      </Form.Label>\n      <Form.Control\n        name={name}\n        id={id}\n        type={type}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        disabled={disabled}\n        className={className}\n        lg={lg}\n        md={md}\n        xxl={xxl}\n        xl={xl}\n        sm={sm}\n        ref={ref}\n        accept={accept ?? ''}\n      />\n      {validation}\n    </Form.Group>\n  );\n};\nexport default TextInput;\n","import * as Yup from 'yup';\n\nexport const LogAndRegSchema = Yup.object().shape({\n  userName: Yup.string()\n    .transform((value) => value.trim())\n    .required('Required')\n    .test('is-valid', 'Invalid format', (value) => {\n      const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      const phonePattern = /^\\d{10}$/; \n      return emailPattern.test(value) || phonePattern.test(value);\n    })\n    .test(\n      'phone-max-length',\n      'Phone number must be exactly 10 digits',\n      (value) => {\n        if (/^\\d{10}$/.test(value)) {\n          return value.length === 10;\n        }\n        return true;\n      }\n    ),\n\n  password: Yup.string()\n    .transform((value) => value.trim())\n    .required('Password is required ')\n    .min(8, 'Password should be at least 8 characters'),\n});\n","import React, { useState } from 'react';\nimport { Col, Container, Form, Row } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom';\nimport { AiOutlineEye, AiOutlineEyeInvisible } from 'react-icons/ai';\nimport { Formik } from 'formik';\nimport { LogAndRegSchema } from './LoginValidation';\nimport TextInput from '../../../components/TextInput';\nimport { useLoginUserMutation } from '../../../redux/api/AuthApi';\nimport BasicButton from '../../../components/BasicButton';\nimport login from '../../../assests/images/loginImage.svg';\nimport { toast } from 'react-toastify';\n\nconst Login = () => {\n  const [passwordIcon, setPasswordIcon] = useState(false);\n  const history = useNavigate();\n  const [loginApi, { isLoading }] = useLoginUserMutation();\n\n  const initialValues = {\n    userName: '',\n    password: '',\n  };\n\n  const showPassword = () => {\n    setPasswordIcon(!passwordIcon);\n  };\n\n  const handleLogin = async (values) => {\n    const { userName, password } = values;\n\n    try {\n      const response = await loginApi({\n        userName,\n        password,\n      });\n      if (response?.data) {\n        toast.success(response?.data?.message, { autoClose: 1000 });\n\n        history('/admin/dashboard');\n      } else {\n        toast.error(response?.error?.data.error, { autoClose: 1000 });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Container\n      fluid\n      className=\" vh-100 w-100 d-flex flex-column justify-content-center align-items-center bg-white\"\n      style={{ overflow: 'hidden' }}\n    >\n      <Row className=\"justify-content-center align-items-center\">\n        <Col\n          xs={12}\n          md={6}\n          lg={6}\n          xl={6}\n          className=\"justify-content-center align-items-center \"\n        >\n          <img\n            className=\"img-fluid d-none d-md-none d-sm-none d-lg-flex d-xl-flex d-xxl-flex d-lg-block ml-10 mt-md-4 justify-content-center align-items-center\"\n            src={login}\n            alt=\"adminLoginImage\"\n            title=\"adminLoginImage\"\n            style={{ height: '500px', width: '800px' }}\n          />\n        </Col>\n\n        <Col\n          xs={12}\n          md={12}\n          lg={6}\n          xl={6}\n          className=\"d-flex flex-column justify-content-center align-items-center \"\n        >\n          <Row className=\"shadow p-4 bg-body rounded d-flex flex-column justify-content-center align-items-center\">\n            <Col className=\"d-flex flex-column justify-content-center align-items-center\">\n              <h5>Login</h5>\n              <p className=\"text-secondary text-noWarp\">\n                Welcome back! Please enter your details\n              </p>\n            </Col>\n            <Col>\n              <Formik\n                initialValues={initialValues}\n                validationSchema={LogAndRegSchema}\n                onSubmit={(values, { setSubmitting }) => {\n                  handleLogin(values);\n                  setSubmitting(false);\n                }}\n              >\n                {({\n                  values,\n                  errors,\n                  touched,\n                  handleChange,\n                  handleBlur,\n                  handleSubmit,\n                  isSubmitting,\n                }) => (\n                  <Form\n                    className=\"d-flex flex-column justify-content-center\"\n                    onSubmit={handleSubmit}\n                  >\n                    <Row>\n                      <Col xs={12}>\n                        <TextInput\n                          htmlFor=\"userName\"\n                          label=\"Email/Phone Number\"\n                          name=\"userName\"\n                          type=\"userName\"\n                          id=\"userName\"\n                          placeholder=\"Enter your Email/Phone Number\"\n                          className={`form-control ${\n                            touched.userName && errors.userName ? 'is-invalid' : ''\n                          }`}\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          validation={\n                            touched.userName && errors.userName ? (\n                              <p className=\"text-danger\">{errors.userName}</p>\n                            ) : (\n                              ''\n                            )\n                          }\n                        />\n                      </Col>\n                    </Row>\n                    <Row className=\"mt-3\">\n                      <Col xs={12}>\n                        <Form.Label htmlFor=\"password\">\n                          Password<span className=\"text-danger\">*</span>\n                        </Form.Label>\n                      </Col>\n                    </Row>\n                    <Row className=\"d-flex flex-row justify-between align-items-center\">\n                      <Col className=\"d-flex flex-row justify-content-end align-items-center\">\n                        <Form.Control\n                          name=\"password\"\n                          type={passwordIcon ? 'text' : 'password'}\n                          size=\"md\"\n                          id=\"password\"\n                          placeholder=\"Enter your password\"\n                          className={`position-relative form-control ${\n                            touched.password && errors.password\n                              ? 'border-danger'\n                              : ''\n                          }`}\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                        />\n                        <div\n                          className=\"position-absolute m-2 pointer\"\n                          onClick={showPassword}\n                        >\n                          {passwordIcon ? (\n                            <AiOutlineEye />\n                          ) : (\n                            <AiOutlineEyeInvisible />\n                          )}\n                        </div>\n                      </Col>\n                    </Row>\n                    {touched.password && errors.password ? (\n                      <p className=\"text-danger\">{errors.password}</p>\n                    ) : (\n                      ''\n                    )}\n\n                    <BasicButton\n                      className=\"mt-3\"\n                      variant={'warning'}\n                      type=\"submit\"\n                      disabled={isSubmitting}\n                      isLoading={isLoading}\n                      label={'Login'}\n                    />\n                  </Form>\n                )}\n              </Formik>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Login;\n"],"names":["props","label","name","id","type","placeholder","htmlFor","lableClassName","value","onChange","onBlur","disabled","className","lg","md","xxl","xl","sm","validation","star","ref","accept","_jsxs","Form","Group","children","Label","_jsx","concat","Control","LogAndRegSchema","Yup","shape","userName","transform","trim","required","test","length","password","min","Login","passwordIcon","setPasswordIcon","useState","history","useNavigate","loginApi","isLoading","useLoginUserMutation","showPassword","Container","fluid","style","overflow","Row","Col","xs","src","login","alt","title","height","width","Formik","initialValues","validationSchema","onSubmit","values","_ref","setSubmitting","async","response","_response$data","_response$error","data","toast","success","message","autoClose","error","console","handleLogin","_ref2","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","TextInput","size","onClick","AiOutlineEye","AiOutlineEyeInvisible","BasicButton","variant"],"sourceRoot":""}