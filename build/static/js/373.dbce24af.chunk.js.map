{"version":3,"file":"static/js/373.dbce24af.chunk.js","mappings":"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","sources":["pages/Admin/Settingss/ServiceArea/ServiceArea.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Col,\n  Container,\n  Row,\n  Modal,\n  Form,\n  Spinner,\n  Card,\n  Pagination,\n} from 'react-bootstrap';\nimport {\n  BsChevronDoubleLeft,\n  BsChevronLeft,\n  BsChevronRight,\n  BsChevronDoubleRight,\n  BsSearch,\n  BsX,\n} from 'react-icons/bs';\nimport { FaPlus } from 'react-icons/fa';\nimport { toast } from 'react-toastify';\nimport { useParams } from 'react-router-dom';\nimport {\n  useAddServiceAreaMutation,\n  useEditServiceAreaMutation,\n  useGetServiceAreaQuery,\n} from '../../../../redux/api/ServiceAreaApi';\nimport { getRole } from '../../../../Constants/Global';\nimport FetchLoader from '../../../../components/FetchLoader';\nimport NoAccess from '../../../../components/NoAccess';\nimport { useTheme } from '../../../../Contexts/ThemeContext';\nimport ServerError from '../../../../components/ServerError';\nimport ReactPaginate from 'react-paginate';\nimport { AiFillLeftCircle, AiFillRightCircle } from 'react-icons/ai';\nimport { IconContext } from 'react-icons';\nimport { BiLeftArrow, BiRightArrow } from 'react-icons/bi';\n\nconst ServiceArea = () => {\n  const { color } = useTheme();\n  const [data, setData] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [startIndex, setStartIndex] = useState(1);\n  const [endIndex, setEndIndex] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [totalItems, setTotalItems] = useState(0);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchInput, setSearchInput] = useState('');\n  const [isSearching, setIsSearching] = useState(false);\n  const { id } = useParams();\n  const [addShow, setAddShow] = useState(false);\n  const [pincode, setPincode] = useState('');\n  const [write, setWrite] = useState(false);\n  const [read, setRead] = useState(false);\n  const [fullAccess, setFullAccess] = useState(false);\n  const [showConfirmationModal, setShowConfirmationModal] = useState(false);\n  const [selectedRowId, setSelectedRowId] = useState(null);\n  const [toggle, setToggle] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [hasServerError, setHasServerError] = useState(false);\n  const role = getRole();\n\n  const {\n    data: ServiceAreaData,\n    refetch,\n    isLoading,\n    isError,\n    error,\n  } = useGetServiceAreaQuery({\n    page: currentPage,\n    search: searchTerm,\n    id: id,\n    role: role,\n  });\n  const [editServiceAreaData] = useEditServiceAreaMutation();\n  const [addServiceArea] = useAddServiceAreaMutation();\n\n  useEffect(() => {\n    if (ServiceAreaData && ServiceAreaData.data) {\n      setData(ServiceAreaData.data);\n      setStartIndex(ServiceAreaData.pagination.startIndex);\n      setCurrentPage(currentPage);\n      setTotalItems(ServiceAreaData.pagination.totalItems);\n      setEndIndex(ServiceAreaData.pagination.endIndex);\n      setTotalPages(ServiceAreaData.pagination.totalPages);\n      setFullAccess(ServiceAreaData.moduleAccess.fullAccess);\n      setWrite(ServiceAreaData.moduleAccess.write);\n      setRead(ServiceAreaData.moduleAccess.read);\n    }\n    if (isError && error?.status === 500) {\n      setHasServerError(true);\n    } else {\n      setHasServerError(false);\n    }\n  }, [ServiceAreaData, currentPage, role, error, isError]);\n\n  const handleClear = () => {\n    setSearchInput('');\n    setSearchTerm('');\n  };\n\n  const handleSearch = () => {\n    setIsSearching(true);\n    setSearchTerm(searchInput);\n    refetch({ page: currentPage, search: searchInput }).then(() => {\n      setIsSearching(false);\n    });\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const handleCheckboxClick = (rowIdx, check) => {\n    setSelectedRowId(rowIdx);\n    setShowConfirmationModal(true);\n    setToggle(check);\n  };\n\n  const handleAddPincode = (e) => {\n    setPincode(e.target.value);\n  };\n\n  const handleConfirmToggle = async () => {\n    setLoading(true);\n\n    const toggledValue = toggle === 'yes' ? 'no' : 'yes';\n    try {\n      const data = {\n        provideService: toggledValue,\n      };\n\n      const response = await editServiceAreaData({\n        id: selectedRowId,\n        role: role,\n        data: data,\n      });\n\n      if (response.data) {\n        toast.success(response.data.message, { autoClose: 1000 });\n        setShowConfirmationModal(false);\n        refetch();\n      } else {\n        toast.error(response.error.data.error, { autoClose: 1000 });\n        setShowConfirmationModal(false);\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddShow = () => {\n    setAddShow(true);\n  };\n\n  const handleAddClose = () => {\n    setAddShow(false);\n    setPincode('');\n  };\n\n  const handleAddData = async () => {\n    \n    const pincodePattern = /^\\d{6}$/;\n    if (!pincodePattern.test(pincode)) {\n      toast.error('Please enter a valid 6-digit pincode', { autoClose: 1000 });\n      return;\n    }\n  \n    setLoading(true);\n  \n    try {\n      const data = {\n        pincode: pincode,\n      };\n      const response = await addServiceArea({\n        role: role,\n        data: data,\n      });\n  \n      if (response.data) {\n        toast.success(response.data.message, { autoClose: 1000 });\n        setAddShow(false);\n        refetch();\n        setPincode('');\n      } else {\n        toast.error(response.error.data.error, { autoClose: 1000 });\n      }\n    } catch (error) {\n      console.error(error);\n      toast.error('Failed to add Service Area.', { autoClose: 1000 });\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Pagination Items\n  const paginationItems = [];\n  for (let number = 1; number <= totalPages; number++) {\n    paginationItems.push(\n      <Pagination.Item\n        key={number}\n        active={number === currentPage}\n        onClick={() => setCurrentPage(number)}\n      >\n        {number}\n      </Pagination.Item>\n    );\n  }\n\n  return (\n    <div>\n      {isLoading ? (\n        <FetchLoader />\n      ) : (\n        <>\n          {hasServerError ? (\n            <ServerError />\n          ) : read ? (\n            <Container fluid className=\"mt-3\">\n              {/* Header */}\n              <Row className=\"boxShadow p-4 mb-4 mt-4\">\n                <Col className=\"d-flex flex-row justify-content-between mt-1\">\n                  <h4 className=\"fw-bold\">Service Area</h4>\n                  {write && (\n                    <Button\n                      style={{ backgroundColor: color, border: 'none' }}\n                      className=\"p-2 m-1\"\n                      onClick={handleAddShow}\n                    >\n                      <FaPlus size={20} />\n                      <span className=\"d-none d-md-inline ms-2\">\n                        Add Service Area\n                      </span>\n                    </Button>\n                  )}\n                </Col>\n              </Row>\n\n              {/* Search */}\n              <Row className=\"boxShadow p-3 mb-4 d-flex flex-lg-row flex-column flex-xxl-row flex-xl-row flex-sm-column flex-md-row\">\n                <Col className=\"my-4 mx-2\" xxl={3} xl={3} lg={3} sm={6} md={6}>\n                  <div className=\"input-group\">\n                    <span className=\"input-group-text\">\n                      <BsSearch />\n                    </span>\n                    <input\n                      type=\"text\"\n                      placeholder=\"Search Service Areas...\"\n                      className=\"form-control\"\n                      value={searchInput}\n                      onChange={(e) => setSearchInput(e.target.value)}\n                      onKeyPress={handleKeyPress}\n                    />\n                    {searchInput && (\n                      <span\n                        className=\"input-group-text\"\n                        onClick={handleClear}\n                        style={{ cursor: 'pointer' }}\n                      >\n                        <BsX />\n                      </span>\n                    )}\n                  </div>\n                </Col>\n                <Col\n                  className=\"d-flex flex-column text-center my-4\"\n                  xxl={2}\n                  xl={2}\n                  lg={2}\n                  sm={3}\n                  md={3}\n                >\n                  <Button\n                    style={{ backgroundColor: color, border: 'none' }}\n                    onClick={handleSearch}\n                    disabled={isSearching || searchInput === ''}\n                  >\n                    {isSearching ? (\n                      <>\n                        <Spinner\n                          as=\"span\"\n                          animation=\"border\"\n                          size=\"sm\"\n                          role=\"status\"\n                          aria-hidden=\"true\"\n                          className=\"me-2\"\n                        />\n                        Searching...\n                      </>\n                    ) : (\n                      'Search'\n                    )}\n                  </Button>\n                </Col>\n              </Row>\n\n              {/* Service Areas Grid */}\n              <Row className=\"boxShadow p-4 mb-0\">\n                {data.length > 0 ? (\n                  <Row xs={1} sm={2} md={3} lg={4} className=\"g-4\">\n                    {data.map((serviceArea) => (\n                      <Col key={serviceArea._id}>\n                        <Card className=\"h-100\">\n                          <Card.Body className=\"d-flex flex-column\">\n                            <Card.Title>\n                              Pincode: {serviceArea.pincode}\n                            </Card.Title>\n                            <Card.Text>\n                              {/* You can add more details here if needed */}\n                            </Card.Text>\n                            <div className=\"mt-auto text-center\">\n                              <Button\n                                variant={\n                                  serviceArea.provideService === 'yes'\n                                    ? 'success'\n                                    : 'danger'\n                                }\n                                className=\"me-2\"\n                                onClick={() => {\n                                  handleCheckboxClick(\n                                    serviceArea._id,\n                                    serviceArea.provideService\n                                  );\n                                }}\n                              >\n                                {serviceArea.provideService === 'yes'\n                                  ? 'Yes'\n                                  : 'No'}\n                              </Button>\n                            </div>\n                          </Card.Body>\n                        </Card>\n                      </Col>\n                    ))}\n                  </Row>\n                ) : (\n                  <Col>\n                    <p className=\"text-center\">No Service Areas found.</p>\n                  </Col>\n                )}\n              </Row>\n\n              {/* Pagination */}\n              {totalPages > 1 && (\n                <Row className=\"mb-4 mt-4\">\n                  <Col className=\"mt-3 d-none d-sm-none d-md-none d-xxl-flex d-xl-flex d-lg-flex justify-content-end align-items-center\">\n                    <ReactPaginate\n                      breakLabel=\"...\"\n                      onPageChange={(selectedPage) =>\n                        setCurrentPage(selectedPage.selected + 1)\n                      }\n                      pageRangeDisplayed={5}\n                      pageCount={totalPages}\n                      renderOnZeroPageCount={null}\n                      activeClassName={'active'}\n                      pageClassName={'page-item'}\n                      pageLinkClassName=\"page-link\"\n                      previousClassName=\"page-item\"\n                      previousLinkClassName=\"page-link\"\n                      nextClassName=\"page-item\"\n                      nextLinkClassName=\"page-link\"\n                      containerClassName=\"pagination\"\n                      previousLabel={\n                        <IconContext.Provider\n                          value={{ color: color, size: '28px' }}\n                        >\n                          <AiFillLeftCircle />\n                        </IconContext.Provider>\n                      }\n                      nextLabel={\n                        <IconContext.Provider\n                          value={{ color: color, size: '28px' }}\n                        >\n                          <AiFillRightCircle />\n                        </IconContext.Provider>\n                      }\n                    />\n                  </Col>\n\n                  {/* Small screens: Render buttons with icons */}\n                  <Col className=\"d-flex d-sm-flex d-md-flex d-xxl-none d-xl-none d-lg-none justify-content-end align-items-center\">\n                    <Button\n                      style={{ backgroundColor: color, border: 'none' }}\n                      onClick={() => setCurrentPage(currentPage - 1)}\n                      disabled={currentPage === 1}\n                      className=\"m-2\"\n                    >\n                      <BiLeftArrow size={14} />\n                    </Button>\n                    <Button\n                      style={{ backgroundColor: color, border: 'none' }}\n                      onClick={() => setCurrentPage(currentPage + 1)}\n                      disabled={currentPage === totalPages}\n                    >\n                      <BiRightArrow size={14} />\n                    </Button>\n                  </Col>\n                </Row>\n              )}\n            </Container>\n          ) : (\n            <NoAccess />\n          )}\n        </>\n      )}\n\n      {/* Edit Service Area Modal */}\n      <Modal\n        show={showConfirmationModal}\n        onHide={() => setShowConfirmationModal(false)}\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Confirm Update</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Are you sure you want to update ?</Modal.Body>\n        <Modal.Footer>\n          <Button\n            variant=\"secondary\"\n            onClick={() => setShowConfirmationModal(false)}\n          >\n            Cancel\n          </Button>\n          <Button\n            style={{ backgroundColor: color }}\n            onClick={handleConfirmToggle}\n            disabled={loading}\n          >\n            {loading ? (\n              <>\n                <Spinner\n                  as=\"span\"\n                  animation=\"border\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                  className=\"me-2\"\n                />\n                Confirm...\n              </>\n            ) : (\n              'Confirm'\n            )}\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      {/* Add Service Area Modal */}\n      <Modal\n        show={addShow}\n        onHide={handleAddClose}\n        centered\n        dialogClassName=\"all-modal\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Add Service Area</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Group controlId=\"addDeviceInput\" className=\"mb-3\">\n              <Form.Label>\n                Pincode <span className=\"text-danger\">*</span>\n              </Form.Label>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"Enter the pincode here\"\n                value={pincode}\n                onChange={handleAddPincode}\n              />\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleAddClose}>\n            Cancel\n          </Button>\n          <Button\n            style={{ backgroundColor: color, border: 'none' }}\n            onClick={handleAddData}\n            disabled={loading}\n          >\n            {loading ? (\n              <>\n                <Spinner\n                  as=\"span\"\n                  animation=\"border\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                  className=\"me-2\"\n                />\n                Adding...\n              </>\n            ) : (\n              'Add'\n            )}\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ServiceArea;\n"],"names":["ServiceArea","color","useTheme","data","setData","useState","currentPage","setCurrentPage","startIndex","setStartIndex","endIndex","setEndIndex","totalPages","setTotalPages","totalItems","setTotalItems","searchTerm","setSearchTerm","searchInput","setSearchInput","isSearching","setIsSearching","id","useParams","addShow","setAddShow","pincode","setPincode","write","setWrite","read","setRead","fullAccess","setFullAccess","showConfirmationModal","setShowConfirmationModal","selectedRowId","setSelectedRowId","toggle","setToggle","loading","setLoading","hasServerError","setHasServerError","role","getRole","ServiceAreaData","refetch","isLoading","isError","error","useGetServiceAreaQuery","page","search","editServiceAreaData","useEditServiceAreaMutation","addServiceArea","useAddServiceAreaMutation","useEffect","pagination","moduleAccess","status","handleSearch","then","handleAddClose","paginationItems","number","push","_jsx","Pagination","Item","active","onClick","children","_jsxs","FetchLoader","_Fragment","ServerError","Container","fluid","className","Row","Col","Button","style","backgroundColor","border","handleAddShow","FaPlus","size","xxl","xl","lg","sm","md","BsSearch","type","placeholder","value","onChange","e","target","onKeyPress","key","handleClear","cursor","BsX","disabled","Spinner","as","animation","length","xs","map","serviceArea","Card","Body","Title","Text","variant","provideService","handleCheckboxClick","rowIdx","check","_id","ReactPaginate","breakLabel","onPageChange","selectedPage","selected","pageRangeDisplayed","pageCount","renderOnZeroPageCount","activeClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","containerClassName","previousLabel","IconContext","Provider","AiFillLeftCircle","nextLabel","AiFillRightCircle","BiLeftArrow","BiRightArrow","NoAccess","Modal","show","onHide","centered","Header","closeButton","Footer","async","toggledValue","response","toast","success","message","autoClose","console","dialogClassName","Form","Group","controlId","Label","Control","test"],"sourceRoot":""}