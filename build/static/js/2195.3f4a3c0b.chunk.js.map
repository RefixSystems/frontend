{"version":3,"file":"static/js/2195.3f4a3c0b.chunk.js","mappings":"iUAeA,MAkPA,EAlPoBA,IAClB,MAAMC,GAAUC,EAAAA,EAAAA,UAAQ,IAAMF,EAAMG,SAAS,CAACH,EAAMG,UAC9CC,GAAOF,EAAAA,EAAAA,UAAQ,IAAMF,EAAMK,WAAa,IAAI,CAACL,EAAMK,aAEnD,cACJC,EAAa,kBACbC,EAAiB,aACjBC,EAAY,gBACZC,EAAe,WACfC,EAAU,KACVC,EAAI,MACJC,IACEC,EAAAA,EAAAA,UACF,CACEZ,UACAG,OACAU,gBAAgB,GAElBC,EAAAA,gBACAC,EAAAA,UACAC,EAAAA,eAGF,OACEC,EAAAA,EAAAA,KAAA,OAAAC,UACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,OAAK,EAACC,UAAU,8BAA6BJ,SAAA,EACjC,IAApBnB,EAAMwB,WACLN,EAAAA,EAAAA,KAAAO,EAAAA,SAAA,CAAAN,UACEC,EAAAA,EAAAA,MAACM,EAAAA,EAAG,CAACH,UAAU,sFAAqFJ,SAAA,EAClGD,EAAAA,EAAAA,KAACS,EAAAA,EAAG,CAACJ,UAAU,OAAOK,IAAK,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAEb,UACvDD,EAAAA,EAAAA,KAACe,EAAAA,EAAKC,QAAO,CACXC,YAAY,iBACZC,MAAOxB,EAAMyB,cAAgB,GAC7BC,SAAWC,GAAM9B,EAAgB8B,EAAEC,OAAOJ,MAAMK,QAChDlB,UAAU,QAGdL,EAAAA,EAAAA,KAACS,EAAAA,EAAG,CACFJ,UAAU,sCACVK,IAAK,EACLC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EAAEb,UAEND,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CACLnB,UAAU,uBACVoB,MAAO,CACLC,QAAS,OACTC,OAAQ,OACRC,gBAAiB,WACjB3B,SACH,mBAOPD,EAAAA,EAAAA,KAAAO,EAAAA,SAAA,KAEFL,EAAAA,EAAAA,MAACM,EAAAA,EAAG,CAAAP,SAAA,EACFC,EAAAA,EAAAA,MAAC2B,EAAAA,EAAK,CACJxB,UAAU,4CACVyB,SAAO,EACPC,UAAQ,EACRC,OAAK,KACD5C,IACJ6C,YAAY,EACZR,MAAO,CAAES,MAAO,QAASjC,SAAA,EAEzBD,EAAAA,EAAAA,KAAA,SAAAC,SACGX,EAAa6C,KAAI,CAACC,EAAaC,KAC9BC,EAAAA,EAAAA,eAAA,SAAQF,EAAYG,sBAAuBC,IAAKH,GAC7CD,EAAYK,QAAQN,KAAI,CAACO,EAAQL,KAChCC,EAAAA,EAAAA,eAAA,SACMI,EAAOC,iBACXH,IAAKH,EACLhC,UAAU,wBACVoB,MAAO,CACLS,MAAM,GAADU,OAAKF,EAAOR,MAAK,MACtBW,WAAY,SACZC,eAAgB,SAChBC,WAAY,UAEdC,QAAU3B,IAGLA,EAAEC,OAAO2B,UAAUC,SAAS,YACD,YAA5BR,EAAOS,OAAO,WAGdT,EAAOU,cAAcV,EAAOW,aAC9B,GAG2B,YAA5BX,EAAOS,OAAO,WACbnD,EAAAA,EAAAA,KAAAO,EAAAA,SAAA,CAAAN,SAAGyC,EAAOS,OAAO,aAEjBjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CACGyC,EAAOS,OAAO,WACfnD,EAAAA,EAAAA,KAACsD,EAAAA,IAAM,CAACjD,UAAU,qBAQhCL,EAAAA,EAAAA,KAAA,YAAWX,IAAmBY,SAC3BR,EAAK8D,OAAS,EACb9D,EAAK0C,KAAI,CAACqB,EAAKnB,KACb7C,EAAWgE,IAETlB,EAAAA,EAAAA,eAAA,SAAQkB,EAAIC,cAAejB,IAAKH,GAC7BmB,EAAIE,MAAMvB,KAAI,CAACwB,EAAMC,KACpB,MAAMC,EACe,WAAnBF,EAAKjB,OAAOoB,IACO,UAAnBH,EAAKjB,OAAOoB,IACO,SAAnBH,EAAKjB,OAAOoB,IACO,eAAnBH,EAAKjB,OAAOoB,GACd,OACExB,EAAAA,EAAAA,eAAA,SACMqB,EAAKI,eACTvB,IAAKoB,EACLvD,UAAU,4BACVoB,MAAO,CACLuC,aAAc,WACdC,SAAU,SACVpB,WAAY,SACZqB,SAAU,SAGXL,GAEGF,EAAKzC,MADLyC,EAAKR,OAAO,QAGV,IACH,SAOfnD,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAAA,MACEmE,QAASpF,EAAQwE,OACjBlD,UAAU,wBAAuBJ,SAClC,0BAOe,IAAvBnB,EAAMsF,cACLlE,EAAAA,EAAAA,MAAAK,EAAAA,SAAA,CAAAN,SAAA,CACG,KACDC,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CACFJ,UAAS,GAAAuC,OACPyB,KAAKd,OAAS,EAAI,SAAW,SAAQ,uDACetD,SAAA,EAEtDC,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACJ,UAAU,4DAA2DJ,SAAA,EACxEC,EAAAA,EAAAA,MAAA,QAAMG,UAAU,MAAKJ,SAAA,CAAC,OACf,KACLC,EAAAA,EAAAA,MAAA,UAAQG,UAAU,MAAKJ,SAAA,CACpBnB,EAAMwF,YAAY,OAAKxF,EAAMyF,kBAGlCvE,EAAAA,EAAAA,KAACQ,EAAAA,EAAG,CAAAP,UACFC,EAAAA,EAAAA,MAAA,QAAMG,UAAU,MAAKJ,SAAA,CAAC,iBACL,KACfD,EAAAA,EAAAA,KAAA,UAAQK,UAAU,MAAKJ,SAAEnB,EAAM0F,wBAIrCxE,EAAAA,EAAAA,KAACS,EAAAA,EAAG,CAACJ,UAAU,mGAAkGJ,UAC/GD,EAAAA,EAAAA,KAACyE,IAAa,CACZC,WAAW,MACXC,aAAeC,GACb9F,EAAM+F,eAAeD,EAAaE,SAAW,GAE/CC,mBAAoB,EACpBC,UAAWlG,EAAMyF,WACjBU,sBAAuB,KACvBC,gBAAiB,SACjBC,cAAe,YACfC,kBAAkB,YAClBC,kBAAkB,YAClBC,sBAAsB,YACtBC,cAAc,YACdC,kBAAkB,YAClBC,mBAAmB,aACnBC,eACE1F,EAAAA,EAAAA,KAAC2F,EAAAA,GAAYC,SAAQ,CACnB1E,MAAO,CAAE2E,MAAO,UAAWC,KAAM,QAAS7F,UAE1CD,EAAAA,EAAAA,KAAC+F,EAAAA,IAAgB,MAGrBC,WACEhG,EAAAA,EAAAA,KAAC2F,EAAAA,GAAYC,SAAQ,CACnB1E,MAAO,CAAE2E,MAAO,UAAWC,KAAM,QAAS7F,UAE1CD,EAAAA,EAAAA,KAACiG,EAAAA,IAAiB,WAK1B/F,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACJ,UAAU,mGAAkGJ,SAAA,EAC/GD,EAAAA,EAAAA,KAACwB,EAAAA,EACC,CACAC,MAAO,CAAEG,gBAAiB,UAAWD,OAAQ,QAC7CqB,QAASA,IAAMlE,EAAM+F,eAAe/F,EAAMwF,YAAc,GACxD4B,SAAgC,IAAtBpH,EAAMwF,YAChBjE,UAAU,MAAKJ,UAEfD,EAAAA,EAAAA,KAACmG,EAAAA,IAAW,CAACL,KAAM,QAErB9F,EAAAA,EAAAA,KAACwB,EAAAA,EACC,CACAC,MAAO,CAAEG,gBAAiB,UAAWD,OAAQ,QAC7CqB,QAASA,KACPlE,EAAM+F,eAAe/F,EAAMwF,YAAc,EAAE,EAE7C4B,SAAUpH,EAAMwF,cAAgBxF,EAAMyF,WAAWtE,UAEjDD,EAAAA,EAAAA,KAACoG,EAAAA,IAAY,CAACN,KAAM,iBAM5B9F,EAAAA,EAAAA,KAAAO,EAAAA,SAAA,WAIF,C,mOC/OV,MAyOA,EAzOwB8F,KACtB,MAAM,MAAER,IAAUS,EAAAA,EAAAA,MACXpH,EAAMqH,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAMC,IAAWJ,EAAAA,EAAAA,WAAS,IAC1BK,EAAOC,IAAYN,EAAAA,EAAAA,WAAS,IAC5BO,EAAcC,IAAmBR,EAAAA,EAAAA,UAAS,eAC1CS,EAASC,IAAcV,EAAAA,EAAAA,WAAS,IAChCW,EAAgBC,IAAqBZ,EAAAA,EAAAA,WAAS,GAC/Ca,GAAOC,EAAAA,EAAAA,MAEXpI,KAAMqI,EAAQ,QACdC,EAAO,MACPC,EACAC,QAASC,EAAiB,UAC1BC,IACEC,EAAAA,EAAAA,IAAsB,CACxBd,aAAcA,EACdM,KAAMA,KAEAnI,KAAM4I,IAAiBC,EAAAA,EAAAA,IAAgB,CAAEV,KAAMA,KAChDW,IAAkBC,EAAAA,EAAAA,IAA0B,CAAEZ,KAAMA,KAE3Da,EAAAA,EAAAA,YAAU,KACJX,GAAYA,EAASrI,OACvBqH,EAAQgB,EAASrI,KAAKiJ,SACtBvB,EAAQW,EAASa,aAAazB,MAC9BG,EAASS,EAASa,aAAavB,QAE7BW,GAA6B,OAAb,OAALC,QAAK,IAALA,OAAK,EAALA,EAAOY,QACpBjB,GAAkB,GAElBA,GAAkB,EACpB,GACC,CAACG,EAAUZ,EAAME,EAAMY,EAAMD,KAGhCU,EAAAA,EAAAA,YAAU,KACJJ,GAAgBA,EAAa5I,OAC/BwH,EAASoB,EAAa5I,MACjB4I,EAAa5I,KAAKoJ,SAASvB,IAC9BC,EAAgB,cAEpB,GACC,CAACc,KAEJI,EAAAA,EAAAA,YAAU,KACRP,EAAkB,CAAEN,KAAMN,GAAe,GACxC,CAACA,IAEJ,MAIMwB,EAAuBA,CAACC,EAAUC,KACtClC,GAASmC,GACPA,EAASvG,KAAKwG,IACZ,GAAIA,EAAKC,MAAQJ,EAAU,CACzB,MAAMK,EAAU,IAAKF,EAAM,CAACF,IAASE,EAAKF,IAW1C,MAVc,eAAVA,GACFI,EAAQlC,KAAOkC,EAAQC,WACvBD,EAAQhC,MAAQgC,EAAQC,YACL,UAAVL,GACTI,EAAQlC,MAAO,EACfkC,EAAQC,YAAa,GACF,SAAVL,GAAqBI,EAAQlC,OACtCkC,EAAQhC,OAAQ,EAChBgC,EAAQC,YAAa,GAEhBD,CACT,CACA,OAAOF,CAAI,KAEd,EAmCG1J,EAAU,CACd,CAAE8J,OAAQ,cAAeC,SAAU,QACnC,CACED,OAAQ,OACRC,SAAU,OACVC,KAAMC,IAAA,IAAC,IAAE1F,GAAK0F,EAAA,OACZhJ,EAAAA,EAAAA,MAAA,SAAOG,UAAU,uBAAsBJ,SAAA,EACrCD,EAAAA,EAAAA,KAAA,SACEkG,UAAWW,EACXsC,KAAK,WACLC,QAAS5F,EAAI6F,SAAS1C,OAAQ,EAC9BvF,SAAUA,IAAMmH,EAAqB/E,EAAI6F,SAAST,IAAK,WAEzD5I,EAAAA,EAAAA,KAAA,QAAMK,UAAU,gBACV,GAGZ,CACE0I,OAAQ,QACRC,SAAU,QACVC,KAAMK,IAAA,IAAC,IAAE9F,GAAK8F,EAAA,OACZpJ,EAAAA,EAAAA,MAAA,SAAOG,UAAU,uBAAsBJ,SAAA,EACrCD,EAAAA,EAAAA,KAAA,SACEmJ,KAAK,WACLjD,UAAWW,EACXuC,QAAS5F,EAAI6F,SAASxC,QAAS,EAC/BzF,SAAUA,IAAMmH,EAAqB/E,EAAI6F,SAAST,IAAK,YAEzD5I,EAAAA,EAAAA,KAAA,QAAMK,UAAU,gBACV,GAGZ,CACE0I,OAAQ,cACRC,SAAU,aACVC,KAAMM,IAAA,IAAC,IAAE/F,GAAK+F,EAAA,OACZrJ,EAAAA,EAAAA,MAAA,SAAOG,UAAU,uBAAsBJ,SAAA,EACrCD,EAAAA,EAAAA,KAAA,SACEkG,UAAWW,EACXsC,KAAK,WACLC,QAAS5F,EAAI6F,SAASP,aAAc,EACpC1H,SAAUA,IACRmH,EAAqB/E,EAAI6F,SAAST,IAAK,iBAG3C5I,EAAAA,EAAAA,KAAA,QAAMK,UAAU,gBACV,IAKd,OACEL,EAAAA,EAAAA,KAAA,OAAAC,SACG2H,GACC5H,EAAAA,EAAAA,KAACwJ,EAAAA,EAAW,KAEZxJ,EAAAA,EAAAA,KAAAO,EAAAA,SAAA,CAAAN,SACCkH,GACAnH,EAAAA,EAAAA,KAACyJ,EAAAA,EAAW,IACT9C,GACAzG,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,OAAK,EAACC,UAAU,QAAOJ,SAAA,EAChCC,EAAAA,EAAAA,MAACM,EAAAA,EAAG,CAACH,UAAU,6CAA4CJ,SAAA,EACzDD,EAAAA,EAAAA,KAACS,EAAAA,EAAG,CAACiJ,GAAI,GAAI7I,GAAI,EAAEZ,UACjBD,EAAAA,EAAAA,KAAA,MAAIK,UAAU,UAASJ,SAAC,4BAE1BC,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CACFiJ,GAAI,GACJ7I,GAAI,EACJR,UAAU,gDAA+CJ,SAAA,EAEzDD,EAAAA,EAAAA,KAACe,EAAAA,EAAK4I,OAAM,CACVzI,MAAO6F,EACP3F,SAlIQC,IACxB2F,EAAgB3F,EAAEC,OAAOJ,MAAM,EAkIfb,UAAU,OACVoB,MAAO,CAAES,MAAO,SAAUjC,SAEzBwG,EAAMtE,KAAKkF,IACVrH,EAAAA,EAAAA,KAAA,UAAmBkB,MAAOmG,EAAKpH,SAC5BoH,GADUA,OAKhBR,IACC7G,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CACLC,MAAO,CAAEG,gBAAiBiE,EAAOlE,OAAQ,QACzCqB,QArHM4G,UACxB1C,GAAW,GACX2C,QAAQC,IAAI,0BAA2B5K,GAEvC,MAAM6K,EAAgB,CACpB5B,QAASjJ,EAAKiD,KAAK6H,IAAM,CACvBC,WAAYD,EAAOC,WACnBtD,KAAMqD,EAAOrD,KACbE,MAAOmD,EAAOnD,MACdiC,WAAYkB,EAAOlB,gBAGvB,WACyBd,EAAe,CACpCjB,aAAcA,EACd7H,KAAM6K,EACN1C,KAAMA,KAGKnI,MACXgL,EAAAA,GAAMC,QAAQ,6BAA8B,CAAEC,UAAW,MACzDzC,KAEAuC,EAAAA,GAAMzC,MAAM,yBAA0B,CAAE2C,UAAW,KAEvD,CAAE,MAAO3C,GACPoC,QAAQpC,MAAMA,EAChB,CAAC,QACCP,GAAW,EACb,GAyFkBhB,SAAUe,EAAQhH,SAEjBgH,GACC/G,EAAAA,EAAAA,MAAAK,EAAAA,SAAA,CAAAN,SAAA,EACED,EAAAA,EAAAA,KAACqK,EAAAA,EAAO,CACNC,GAAG,OACHC,UAAU,SACVzE,KAAK,KACLuB,KAAK,SACL,cAAY,OACZhH,UAAU,SACV,eAIJ,gBAMVL,EAAAA,EAAAA,KAACQ,EAAAA,EAAG,CAACH,UAAU,qBAAoBJ,UACjCD,EAAAA,EAAAA,KAACwK,EAAAA,EAAU,CACTvL,QAASA,EACTE,UAAWD,EACXkF,cAAc,EACd9D,WAAW,UAKjBN,EAAAA,EAAAA,KAACyK,EAAAA,EAAQ,OAIX,C","sources":["components/BasicTable.js","pages/Admin/RoleBased/roleBasedAcess.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport {\n  useTable,\n  useSortBy,\n  usePagination,\n  useGlobalFilter,\n} from 'react-table';\nimport { Button, Col, Container, Form, Row, Table } from 'react-bootstrap';\nimport { BiLeftArrow, BiRightArrow } from 'react-icons/bi';\nimport { FaSort } from 'react-icons/fa';\nimport { AiFillLeftCircle, AiFillRightCircle } from 'react-icons/ai';\nimport ReactPaginate from 'react-paginate';\nimport { IconContext } from 'react-icons/lib';\nimport './FilterComponent.css';\n\nconst BasicTable = (props) => {\n  const columns = useMemo(() => props.COLUMNS, [props.COLUMNS]);\n  const data = useMemo(() => props.MOCK_DATA || [], [props.MOCK_DATA]);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    setGlobalFilter,\n    prepareRow,\n    rows,\n    state,\n  } = useTable(\n    {\n      columns,\n      data,\n      autoResetWidth: false,\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination\n  );\n\n  return (\n    <div>\n      <Container fluid className=\"ml-xxl-n4 ml-xl-n4 ml-lg-n4\">\n        {props.isHeading !== false ? (\n          <>\n            <Row className=\"d-flex  flex-lg-row flex-column flex-xxl-row flex-xl-row flex-sm-column flex-md-row\">\n              <Col className=\"my-4\" xxl={3} xl={3} lg={3} sm={6} md={6}>\n                <Form.Control\n                  placeholder=\"Search here...\"\n                  value={state.globalFilter || ''}\n                  onChange={(e) => setGlobalFilter(e.target.value.trim())}\n                  className=\"\"\n                />\n              </Col>\n              <Col\n                className=\"d-flex flex-column text-center my-4\"\n                xxl={2}\n                xl={2}\n                lg={2}\n                sm={3}\n                md={3}\n              >\n                <Button\n                  className=\" text-white fw-bold \"\n                  style={{\n                    outline: 'none',\n                    border: 'none',\n                    backgroundColor: '#db6300',\n                  }}\n                >\n                  Search\n                </Button>\n              </Col>\n            </Row>\n          </>\n        ) : (\n          <></>\n        )}\n        <Row>\n          <Table\n            className=\"justify-content-center align-items-center\"\n            striped\n            bordered\n            hover\n            {...getTableProps()}\n            responsive={true}\n            style={{ width: '100%' }}\n          >\n            <thead>\n              {headerGroups.map((headerGroup, index) => (\n                <tr {...headerGroup.getHeaderGroupProps()} key={index}>\n                  {headerGroup.headers.map((column, index) => (\n                    <th\n                      {...column.getHeaderProps()}\n                      key={index}\n                      className=\"text-center text-dark\"\n                      style={{\n                        width: `${column.width}px`,\n                        whiteSpace: 'nowrap',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                      }}\n                      onClick={(e) => {\n                        // Check if the click was not on the sort icon and if the column is not \"ACTIONS\"\n                        if (\n                          !e.target.classList.contains('fa-sort') &&\n                          column.render('Header') !== 'ACTIONS'\n                        ) {\n                          // Change sorting on a single tap\n                          column.toggleSortBy(!column.isSortedDesc);\n                        }\n                      }}\n                    >\n                      {column.render('Header') === 'ACTIONS' ? (\n                        <>{column.render('Header')}</>\n                      ) : (\n                        <div>\n                          {column.render('Header')}\n                          <FaSort className=\"mx-2\" />\n                        </div>\n                      )}\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.length > 0 ? ( // Change from page to rows\n                rows.map((row, index) => {\n                  prepareRow(row);\n                  return (\n                    <tr {...row.getRowProps()} key={index}>\n                      {row.cells.map((cell, cellIndex) => {\n                        const isActionColumn =\n                          cell.column.id === 'action' ||\n                          cell.column.id === 'write' ||\n                          cell.column.id === 'read' ||\n                          cell.column.id === 'fullAccess';\n                        return (\n                          <td\n                            {...cell.getCellProps()}\n                            key={cellIndex}\n                            className=\"text-secondary text-start\"\n                            style={{\n                              textOverflow: 'ellipsis',\n                              overflow: 'hidden',\n                              whiteSpace: 'nowrap',\n                              maxWidth: '20ch',\n                            }}\n                          >\n                            {isActionColumn\n                              ? cell.render('Cell')\n                              : cell.value\n                                ? cell.render('Cell')\n                                : '-'}\n                          </td>\n                        );\n                      })}\n                    </tr>\n                  );\n                })\n              ) : (\n                <tr>\n                  <td\n                    colSpan={columns.length}\n                    className=\"text-center text-dark\"\n                  >\n                    No Data Found\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </Table>\n          {props.isPagination !== false ? (\n            <>\n              {' '}\n              <Col\n                className={`${\n                  page.length > 0 ? 'd-flex' : 'd-none'\n                } flex-row justify-content-center align-items-center`}\n              >\n                <Col className=\"d-flex justify-content-start align-items-center flex-wrap\">\n                  <span className=\"m-1\">\n                    Page{' '}\n                    <strong className=\"m-2\">\n                      {props.currentPage} of {props.totalPages}\n                    </strong>\n                  </span>\n                  <Row>\n                    <span className=\"m-1\">\n                      Items per page{' '}\n                      <strong className=\"m-2\">{props.itemsPerPage}</strong>\n                    </span>\n                  </Row>\n                </Col>\n                <Col className=\"d-none d-sm-none d-md-none d-xxl-flex d-xl-flex d-lg-flex justify-content-end align-items-center\">\n                  <ReactPaginate\n                    breakLabel=\"...\"\n                    onPageChange={(selectedPage) =>\n                      props.setCurrentPage(selectedPage.selected + 1)\n                    }\n                    pageRangeDisplayed={5}\n                    pageCount={props.totalPages}\n                    renderOnZeroPageCount={null}\n                    activeClassName={'active'}\n                    pageClassName={'page-item'}\n                    pageLinkClassName=\"page-link\"\n                    previousClassName=\"page-item\"\n                    previousLinkClassName=\"page-link\"\n                    nextClassName=\"page-item\"\n                    nextLinkClassName=\"page-link\"\n                    containerClassName=\"pagination\"\n                    previousLabel={\n                      <IconContext.Provider\n                        value={{ color: '#db6300', size: '28px' }}\n                      >\n                        <AiFillLeftCircle />\n                      </IconContext.Provider>\n                    }\n                    nextLabel={\n                      <IconContext.Provider\n                        value={{ color: '#db6300', size: '28px' }}\n                      >\n                        <AiFillRightCircle />\n                      </IconContext.Provider>\n                    }\n                  />\n                </Col>\n                <Col className=\"d-flex d-sm-flex d-md-flex d-xxl-none d-xl-none d-lg-none justify-content-end align-items-center\">\n                  <Button\n                    // variant=\"warning\"/\n                    style={{ backgroundColor: '#db6300', border: 'none' }}\n                    onClick={() => props.setCurrentPage(props.currentPage - 1)}\n                    disabled={props.currentPage === 1}\n                    className=\"m-2\"\n                  >\n                    <BiLeftArrow size={14} />\n                  </Button>\n                  <Button\n                    // variant=\"warning\"\n                    style={{ backgroundColor: '#db6300', border: 'none' }}\n                    onClick={() => {\n                      props.setCurrentPage(props.currentPage + 1);\n                    }}\n                    disabled={props.currentPage === props.totalPages}\n                  >\n                    <BiRightArrow size={14} />\n                  </Button>\n                </Col>\n              </Col>\n            </>\n          ) : (\n            <></>\n          )}\n        </Row>\n      </Container>\n    </div>\n  );\n};\nexport default BasicTable;\n","import React, { useState, useEffect } from 'react';\nimport { Button, Col, Container, Row, Form, Spinner } from 'react-bootstrap';\nimport BasicTable from '../../../components/BasicTable';\nimport {\n  useGetRoleAccessQuery,\n  useEditRoleAccessMutation,\n  useGetRoleQuery,\n} from '../../../redux/api/RoleAccessApi';\nimport { toast } from 'react-toastify';\nimport { getRole } from '../../../Constants/Global';\nimport FetchLoader from '../../../components/FetchLoader';\nimport NoAccess from '../../../components/NoAccess';\nimport { useTheme } from '../../../Contexts/ThemeContext';\nimport ServerError from '../../../components/ServerError';\n\nconst RoleBasedAccess = () => {\n  const { color } = useTheme();\n  const [data, setData] = useState([]);\n  const [roles, setRoles] = useState([]);\n  const [read, setRead] = useState(false);\n  const [write, setWrite] = useState(false);\n  const [selectedRole, setSelectedRole] = useState('Technician');\n  const [loading, setLoading] = useState(false);\n  const [hasServerError, setHasServerError] = useState(false);\n  const role = getRole();\n  const {\n    data: roleData,\n    isError, \n    error,\n    refetch: refetchRoleAccess,\n    isLoading,\n  } = useGetRoleAccessQuery({\n    selectedRole: selectedRole,\n    role: role,\n  });\n  const { data: roleListData } = useGetRoleQuery({ role: role });\n  const [editRoleAccess] = useEditRoleAccessMutation({ role: role });\n\n  useEffect(() => {\n    if (roleData && roleData.data) {\n      setData(roleData.data.modules);\n      setRead(roleData.moduleAccess.read);\n      setWrite(roleData.moduleAccess.write);\n    }\n    if (isError && error?.status === 500) {\n      setHasServerError(true);\n    } else {\n      setHasServerError(false);\n    }\n  }, [roleData, read, write,error,isError]);\n  \n\n  useEffect(() => {\n    if (roleListData && roleListData.data) {\n      setRoles(roleListData.data);\n      if (!roleListData.data.includes(selectedRole)) {\n        setSelectedRole('Technician');\n      }\n    }\n  }, [roleListData]);\n\n  useEffect(() => {\n    refetchRoleAccess({ role: selectedRole });\n  }, [selectedRole]);\n\n  const handleRoleChange = (e) => {\n    setSelectedRole(e.target.value);\n  };\n\n  const handleCheckboxChange = (moduleId, field) => {\n    setData((prevData) =>\n      prevData.map((item) => {\n        if (item._id === moduleId) {\n          const newItem = { ...item, [field]: !item[field] };\n          if (field === 'fullAccess') {\n            newItem.read = newItem.fullAccess;\n            newItem.write = newItem.fullAccess;\n          } else if (field === 'write') {\n            newItem.read = true;\n            newItem.fullAccess = false;\n          } else if (field === 'read' && !newItem.read) {\n            newItem.write = false;\n            newItem.fullAccess = false;\n          }\n          return newItem;\n        }\n        return item;\n      })\n    );\n  };\n\n  const handleSaveChanges = async () => {\n    setLoading(true);\n    console.log('Data before formatting:', data);\n\n    const formattedData = {\n      modules: data.map((module) => ({\n        moduleName: module.moduleName,\n        read: module.read,\n        write: module.write,\n        fullAccess: module.fullAccess,\n      })),\n    };\n    try {\n      const response = await editRoleAccess({\n        selectedRole: selectedRole,\n        data: formattedData,\n        role: role,\n      });\n\n      if (response.data) {\n        toast.success('Changes saved successfully', { autoClose: 1000 });\n        refetchRoleAccess();\n      } else {\n        toast.error('Failed to save changes', { autoClose: 1000 });\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const COLUMNS = [\n    { Header: 'Module Name', accessor: 'name' },\n    {\n      Header: 'Read',\n      accessor: 'read',\n      Cell: ({ row }) => (\n        <label className=\"custom-checkbox my-2\">\n          <input\n            disabled={!write}\n            type=\"checkbox\"\n            checked={row.original.read || false}\n            onChange={() => handleCheckboxChange(row.original._id, 'read')}\n          />\n          <span className=\"checkmark\"></span>\n        </label>\n      ),\n    },\n    {\n      Header: 'Write',\n      accessor: 'write',\n      Cell: ({ row }) => (\n        <label className=\"custom-checkbox my-2\">\n          <input\n            type=\"checkbox\"\n            disabled={!write}\n            checked={row.original.write || false}\n            onChange={() => handleCheckboxChange(row.original._id, 'write')}\n          />\n          <span className=\"checkmark\"></span>\n        </label>\n      ),\n    },\n    {\n      Header: 'Full Access',\n      accessor: 'fullAccess',\n      Cell: ({ row }) => (\n        <label className=\"custom-checkbox my-2\">\n          <input\n            disabled={!write}\n            type=\"checkbox\"\n            checked={row.original.fullAccess || false}\n            onChange={() =>\n              handleCheckboxChange(row.original._id, 'fullAccess')\n            }\n          />\n          <span className=\"checkmark\"></span>\n        </label>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      {isLoading ? (\n        <FetchLoader />\n      ) : (\n        <>\n        {hasServerError ? (\n         <ServerError/>\n        ) : read ? (\n            <Container fluid className=\"mt-3 \">\n              <Row className=\"boxShadow p-4 mb-4 mt-4 align-items-center\">\n                <Col xs={12} sm={6}>\n                  <h4 className=\"fw-bold\">Role & Module Access</h4>\n                </Col>\n                <Col\n                  xs={12}\n                  sm={6}\n                  className=\"d-flex justify-content-end align-items-center\"\n                >\n                  <Form.Select\n                    value={selectedRole}\n                    onChange={handleRoleChange}\n                    className=\"me-2\"\n                    style={{ width: '200px' }}\n                  >\n                    {roles.map((role) => (\n                      <option key={role} value={role}>\n                        {role}\n                      </option>\n                    ))}\n                  </Form.Select>\n                  {write && (\n                    <Button\n                      style={{ backgroundColor: color, border: 'none' }}\n                      onClick={handleSaveChanges}\n                      disabled={loading}\n                    >\n                      {loading ? (\n                        <>\n                          <Spinner\n                            as=\"span\"\n                            animation=\"border\"\n                            size=\"sm\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                            className=\"me-2\"\n                          />\n                          Saving...\n                        </>\n                      ) : (\n                        'Save'\n                      )}\n                    </Button>\n                  )}\n                </Col>\n              </Row>\n              <Row className=\"boxShadow p-4 mb-4\">\n                <BasicTable\n                  COLUMNS={COLUMNS}\n                  MOCK_DATA={data}\n                  isPagination={false}\n                  isHeading={false}\n                />\n              </Row>\n            </Container>\n          ) : (\n            <NoAccess />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default RoleBasedAccess;\n"],"names":["props","columns","useMemo","COLUMNS","data","MOCK_DATA","getTableProps","getTableBodyProps","headerGroups","setGlobalFilter","prepareRow","rows","state","useTable","autoResetWidth","useGlobalFilter","useSortBy","usePagination","_jsx","children","_jsxs","Container","fluid","className","isHeading","_Fragment","Row","Col","xxl","xl","lg","sm","md","Form","Control","placeholder","value","globalFilter","onChange","e","target","trim","Button","style","outline","border","backgroundColor","Table","striped","bordered","hover","responsive","width","map","headerGroup","index","_createElement","getHeaderGroupProps","key","headers","column","getHeaderProps","concat","whiteSpace","justifyContent","alignItems","onClick","classList","contains","render","toggleSortBy","isSortedDesc","FaSort","length","row","getRowProps","cells","cell","cellIndex","isActionColumn","id","getCellProps","textOverflow","overflow","maxWidth","colSpan","isPagination","page","currentPage","totalPages","itemsPerPage","ReactPaginate","breakLabel","onPageChange","selectedPage","setCurrentPage","selected","pageRangeDisplayed","pageCount","renderOnZeroPageCount","activeClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","containerClassName","previousLabel","IconContext","Provider","color","size","AiFillLeftCircle","nextLabel","AiFillRightCircle","disabled","BiLeftArrow","BiRightArrow","RoleBasedAccess","useTheme","setData","useState","roles","setRoles","read","setRead","write","setWrite","selectedRole","setSelectedRole","loading","setLoading","hasServerError","setHasServerError","role","getRole","roleData","isError","error","refetch","refetchRoleAccess","isLoading","useGetRoleAccessQuery","roleListData","useGetRoleQuery","editRoleAccess","useEditRoleAccessMutation","useEffect","modules","moduleAccess","status","includes","handleCheckboxChange","moduleId","field","prevData","item","_id","newItem","fullAccess","Header","accessor","Cell","_ref","type","checked","original","_ref2","_ref3","FetchLoader","ServerError","xs","Select","async","console","log","formattedData","module","moduleName","toast","success","autoClose","Spinner","as","animation","BasicTable","NoAccess"],"sourceRoot":""}