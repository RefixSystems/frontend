{"version":3,"file":"static/js/7024.d0584633.chunk.js","mappings":"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","sources":["components/TablePaginationComponent.js","pages/Admin/EmployeeRoles/EmployeeRoles.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport {\n  useTable,\n  useSortBy,\n  usePagination,\n  useGlobalFilter,\n} from 'react-table';\nimport { Button, Col, Container, Row, Table } from 'react-bootstrap';\nimport { BiLeftArrow, BiRightArrow } from 'react-icons/bi';\nimport { FaSort } from 'react-icons/fa';\nimport { AiFillLeftCircle, AiFillRightCircle } from 'react-icons/ai';\nimport ReactPaginate from 'react-paginate';\nimport { IconContext } from 'react-icons/lib';\nimport './FilterComponent.css';\nimport { useTheme } from '../Contexts/ThemeContext';\n\nconst BasicTable = (props) => {\n  const { color } = useTheme();\n  const columns = useMemo(() => props.COLUMNS, [props.COLUMNS]);\n  const data = useMemo(() => props.MOCK_DATA || [], [props.MOCK_DATA]);\n  const { getTableProps, getTableBodyProps, headerGroups, prepareRow, page } =\n    useTable(\n      {\n        columns,\n        data,\n        autoResetWidth: false,\n      },\n      useGlobalFilter,\n      useSortBy,\n      usePagination\n    );\n\n  return (\n    <div>\n      <Container fluid className=\"ml-xxl-n4 ml-xl-n4 ml-lg-n4\">\n        <Row>\n          <Table\n            className=\"justify-content-center align-items-center\"\n            striped\n            hover\n            {...getTableProps()}\n            responsive={true}\n            style={{ width: '100%', marginLeft: '25px' }}\n          >\n            <thead>\n              {headerGroups.map((headerGroup, index) => (\n                <tr {...headerGroup.getHeaderGroupProps()} key={index}>\n                  {headerGroup.headers.map((column, index) => (\n                    <th\n                      {...column.getHeaderProps()}\n                      key={index}\n                      className=\"text-center text-dark\"\n                      style={{\n                        width: `${column.width}px`,\n                        whiteSpace: 'nowrap',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                      }}\n                      onClick={(e) => {\n                        // Check if the click was not on the sort icon and if the column is not \"ACTIONS\"\n                        if (\n                          !e.target.classList.contains('fa-sort') &&\n                          column.render('Header') !== 'ACTIONS'\n                        ) {\n                          // Change sorting on a single tap\n                          column.toggleSortBy(!column.isSortedDesc);\n                        }\n                      }}\n                    >\n                      {column.render('Header') === 'ACTIONS' ? (\n                        <>{column.render('Header')}</>\n                      ) : (\n                        <div>\n                          {column.render('Header')}\n                          <FaSort className=\"mx-2\" />\n                        </div>\n                      )}\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {page.length > 0 ? (\n                page.map((row, index) => {\n                  prepareRow(row);\n                  return (\n                    <tr {...row.getRowProps()} key={index}>\n                      {row.cells.map((cell, cellIndex) => {\n                        const isActionColumn =\n                          cell.column.id === 'action' ||\n                          cell.column.id === 'localShop' ||\n                          cell.column.id === 'serviceCenter' ||\n                          cell.column.id === 'ourServices' ||\n                          cell.column.id === 'addInCarousel';\n                        return (\n                          <td\n                            {...cell.getCellProps()}\n                            key={cellIndex}\n                            className=\"text-secondary text-start\"\n                            style={{\n                              textOverflow: 'ellipsis',\n                              overflow: 'hidden',\n                              whiteSpace: 'nowrap',\n                              maxWidth: '20ch',\n                              backgroundColor: index <= props.count-1 ?\"#cfd1d1\":\"\",\n                            }}\n                          >\n                            {isActionColumn\n                              ? cell.render('Cell')\n                              : cell.value\n                                ? cell.render('Cell')\n                                : '-'}\n                          </td>\n                        );\n                      })}\n                    </tr>\n                  );\n                })\n              ) : (\n                <tr>\n                  <td\n                    colSpan={columns.length}\n                    className=\"text-center text-dark\"\n                  >\n                    No Data Found\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </Table>\n          <Col\n            className={`${\n              page.length > 0 ? 'd-flex' : 'd-none'\n            } flex-row justify-content-center align-items-center`}\n          >\n            <Col className=\"d-flex justify-content-start align-items-center flex-wrap\">\n              <span className=\"m-1\">\n                Showing{''}\n                <strong className=\"m-2\">\n                  {props.startIndex} to {props.endIndex} of{' '}\n                  <strong className=\"m-2\"> {props.totalItems} entries</strong>\n                </strong>\n              </span>\n            </Col>\n            <Col className=\" mt-3 d-none d-sm-none d-md-none d-xxl-flex d-xl-flex d-lg-flex justify-content-end align-items-center\">\n              <ReactPaginate\n                breakLabel=\"...\"\n                onPageChange={(selectedPage) =>\n                  props.setCurrentPage(selectedPage.selected + 1)\n                }\n                pageRangeDisplayed={5}\n                pageCount={props.totalPages}\n                renderOnZeroPageCount={null}\n                activeClassName={'active'}\n                pageClassName={'page-item'}\n                pageLinkClassName=\"page-link\"\n                previousClassName=\"page-item\"\n                previousLinkClassName=\"page-link\"\n                nextClassName=\"page-item\"\n                nextLinkClassName=\"page-link\"\n                containerClassName=\"pagination\"\n                previousLabel={\n                  <IconContext.Provider value={{ color: color, size: '28px' }}>\n                    <AiFillLeftCircle />\n                  </IconContext.Provider>\n                }\n                nextLabel={\n                  <IconContext.Provider value={{ color: color, size: '28px' }}>\n                    <AiFillRightCircle />\n                  </IconContext.Provider>\n                }\n              />\n            </Col>\n            <Col className=\"d-flex d-sm-flex d-md-flex d-xxl-none d-xl-none d-lg-none justify-content-end align-items-center\">\n              <Button\n                style={{ backgroundColor: color, border: 'none' }}\n                onClick={() => props.setCurrentPage(props.currentPage - 1)}\n                disabled={props.currentPage === 1}\n                className=\"m-2\"\n              >\n                <BiLeftArrow size={14} />\n              </Button>\n              <Button\n                style={{ backgroundColor: color, border: 'none' }}\n                onClick={() => {\n                  props.setCurrentPage(props.currentPage + 1);\n                }}\n                disabled={props.currentPage === props.totalPages}\n              >\n                <BiRightArrow size={14} />\n              </Button>\n            </Col>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\nexport default BasicTable;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Col,\n  Container,\n  Row,\n  Modal,\n  Form,\n  Spinner,\n} from 'react-bootstrap';\nimport BasicTable from '../../../components/TablePaginationComponent';\nimport { BsSearch, BsX } from 'react-icons/bs';\nimport { toast } from 'react-toastify';\nimport { FaPlus } from 'react-icons/fa';\nimport { useParams } from 'react-router-dom';\nimport {\n  useAddEmployeeRoleMutation,\n  useGetEmployeeRoleQuery,\n} from '../../../redux/api/EmployeeRoleApi';\nimport { getRole } from '../../../Constants/Global';\nimport NoAccess from '../../../components/NoAccess';\nimport FetchLoader from '../../../components/FetchLoader';\nimport { useTheme } from '../../../Contexts/ThemeContext';\nimport { format } from 'date-fns';\nimport ServerError from '../../../components/ServerError';\nconst EmployeeRole = () => {\n  const { color } = useTheme();\n  const [data, setData] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [startIndex, setStartIndex] = useState(1);\n  const [endIndex, setEndIndex] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [totalItems, setTotalItems] = useState(0);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchInput, setSearchInput] = useState('');\n  const [isSearching, setIsSearching] = useState(false);\n  const { id } = useParams();\n  const [addShow, setAddShow] = useState(false);\n  const [write, setWrite] = useState(false);\n  const [read, setRead] = useState(false);\n  const [role, setRole] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [hasServerError, setHasServerError] = useState(false);\n  const formatDateTime = (date) => format(new Date(date), 'dd-MMM-yyyy h:mm a');\n  const roles = getRole();\n  const {\n    data: employeeRoleData,\n    isLoading,\n    isError, \n    error,\n    refetch,\n  } = useGetEmployeeRoleQuery({\n    page: currentPage,\n    search: searchTerm,\n    id: id,\n    role: roles,\n  });\n  const [addEmployeeRole] = useAddEmployeeRoleMutation();\n\n  useEffect(() => {\n    if (employeeRoleData && employeeRoleData.data) {\n      setData(employeeRoleData.data);\n      setStartIndex(employeeRoleData.pagination.startIndex);\n      setCurrentPage(currentPage);\n      setTotalItems(employeeRoleData.pagination.totalItems);\n      setEndIndex(employeeRoleData.pagination.endIndex);\n      setTotalPages(employeeRoleData.pagination.totalPages);\n      setWrite(employeeRoleData.moduleAccess.write);\n      setRead(employeeRoleData.moduleAccess.read);\n    }\n    if (isError && error?.status === 500) {\n      setHasServerError(true);\n    } else {\n      setHasServerError(false);\n    }\n  }, [employeeRoleData, currentPage, role,error,isError]);\n\n  const handleClear = () => {\n    setSearchInput('');\n    setSearchTerm('');\n  };\n\n  const handleSearch = () => {\n    setIsSearching(true);\n    setSearchTerm(searchInput);\n    refetch({ page: currentPage, search: searchInput }).then(() => {\n      setIsSearching(false);\n    });\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const handleAddData = async () => {\n    setLoading(true);\n\n    try {\n      const response = await addEmployeeRole({\n        data: {\n          nameOfRole: role,\n        },\n        role: roles,\n      });\n\n      if (response.data) {\n        toast.success(response.data.message, { autoClose: 1000 });\n        setAddShow(false);\n        refetch();\n        setRole('');\n      } else {\n        toast.error(response.error.data.error, { autoClose: 1000 });\n        setRole('');\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const COLUMNS = [\n    {\n      Header: 'ID',\n      accessor: 's_no',\n    },\n    {\n      Header: 'Name of Role',\n      accessor: 'nameOfRole',\n    },\n    {\n      Header: 'Total Employee',\n      accessor: 'totalEmployees',\n    },\n    {\n      Header: 'Created At',\n      accessor: 'createdAt',\n      Cell: ({ value }) => formatDateTime(value),\n    },\n    {\n      Header: 'Updated At',\n      accessor: 'updatedAt',\n      Cell: ({ value }) => formatDateTime(value),\n    },\n  ];\n\n  return (\n    <div>\n      {isLoading ? (\n        <FetchLoader />\n      ) : (\n        <>\n       {hasServerError ? (\n         <ServerError/>\n        ) : read ? (\n            <Container fluid className=\"mt-3 \">\n              <Row className=\"boxShadow p-4 mb-4 mt-4\">\n                <Col className=\"d-flex flex-row justify-content-between mt-1\">\n                  <h4 className=\"fw-bold\">Employee Roles</h4>\n                  {write ? (\n                    <div>\n                      <Button\n                        style={{ backgroundColor: color, border: 'none' }}\n                        className=\"p-2 m-1\"\n                        onClick={() => setAddShow(true)}\n                      >\n                        <FaPlus size={20} />\n                        <span className=\"d-none d-md-inline\"> Add Role</span>\n                      </Button>\n                    </div>\n                  ) : (\n                    <></>\n                  )}\n                </Col>\n              </Row>\n              <Row className=\"boxShadow  p-3 mb-4 d-flex flex-lg-row flex-column flex-xxl-row flex-xl-row flex-sm-column flex-md-row\">\n                <Col className=\"my-4 mx-2\" xxl={3} xl={3} lg={3} sm={6} md={6}>\n                  <div className=\"input-group\">\n                    <span className=\"input-group-text\">\n                      <BsSearch />\n                    </span>\n                    <input\n                      type=\"text\"\n                      placeholder=\"Search roles...\"\n                      className=\"form-control\"\n                      value={searchInput}\n                      onChange={(e) => setSearchInput(e.target.value)}\n                      onKeyPress={handleKeyPress}\n                    />\n                    {searchInput && (\n                      <span className=\"input-group-text\" onClick={handleClear}>\n                        <BsX />\n                      </span>\n                    )}\n                  </div>\n                </Col>\n                <Col\n                  className=\"d-flex flex-column text-center my-4\"\n                  xxl={2}\n                  xl={2}\n                  lg={2}\n                  sm={3}\n                  md={3}\n                >\n                  <Button\n                    style={{ backgroundColor: color, border: 'none' }}\n                    onClick={handleSearch}\n                    disabled={isSearching || searchInput === ''}\n                  >\n                    {isSearching ? (\n                      <>\n                        <Spinner\n                          as=\"span\"\n                          animation=\"border\"\n                          size=\"sm\"\n                          role=\"status\"\n                          aria-hidden=\"true\"\n                          className=\"me-2\"\n                        />\n                        Searching...\n                      </>\n                    ) : (\n                      'Search'\n                    )}\n                  </Button>\n                </Col>\n              </Row>\n              <Row className=\"boxShadow p-4 mb-4\">\n                <BasicTable\n                  COLUMNS={COLUMNS}\n                  MOCK_DATA={data}\n                  currentPage={currentPage}\n                  startIndex={startIndex}\n                  endIndex={endIndex}\n                  setCurrentPage={setCurrentPage}\n                  totalItems={totalItems}\n                  totalPages={totalPages}\n                />\n              </Row>\n            </Container>\n          ) : (\n            <NoAccess />\n          )}\n\n          <Modal show={addShow} onHide={() => setAddShow(false)} centered>\n            <Modal.Header closeButton>\n              <Modal.Title>Add Role</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <Form>\n                <Form.Group controlId=\"roleInput\">\n                  <Form.Label>Role <span className=\"text-danger\">*</span></Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter the role here\"\n                    value={role}\n                    onChange={(e) => setRole(e.target.value)}\n                  />\n                </Form.Group>\n              </Form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={() => setAddShow(false)}>\n                Cancel\n              </Button>\n              <Button\n                style={{ backgroundColor: color, border: 'none' }}\n                onClick={handleAddData}\n                disabled={loading}\n              >\n                {loading ? (\n                  <>\n                    <Spinner\n                      as=\"span\"\n                      animation=\"border\"\n                      size=\"sm\"\n                      role=\"status\"\n                      aria-hidden=\"true\"\n                      className=\"me-2\"\n                    />\n                    Add...\n                  </>\n                ) : (\n                  'Add'\n                )}\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default EmployeeRole;\n"],"names":["props","color","useTheme","columns","useMemo","COLUMNS","data","MOCK_DATA","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","useTable","autoResetWidth","useGlobalFilter","useSortBy","usePagination","_jsx","children","Container","fluid","className","_jsxs","Row","Table","striped","hover","responsive","style","width","marginLeft","map","headerGroup","index","_createElement","getHeaderGroupProps","key","headers","column","getHeaderProps","concat","whiteSpace","justifyContent","alignItems","onClick","e","target","classList","contains","render","toggleSortBy","isSortedDesc","_Fragment","FaSort","length","row","getRowProps","cells","cell","cellIndex","isActionColumn","id","getCellProps","textOverflow","overflow","maxWidth","backgroundColor","count","value","colSpan","Col","startIndex","endIndex","totalItems","ReactPaginate","breakLabel","onPageChange","selectedPage","setCurrentPage","selected","pageRangeDisplayed","pageCount","totalPages","renderOnZeroPageCount","activeClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","containerClassName","previousLabel","IconContext","Provider","size","AiFillLeftCircle","nextLabel","AiFillRightCircle","Button","border","currentPage","disabled","BiLeftArrow","BiRightArrow","EmployeeRole","setData","useState","setStartIndex","setEndIndex","setTotalPages","setTotalItems","searchTerm","setSearchTerm","searchInput","setSearchInput","isSearching","setIsSearching","useParams","addShow","setAddShow","write","setWrite","read","setRead","role","setRole","loading","setLoading","hasServerError","setHasServerError","formatDateTime","date","format","Date","roles","getRole","employeeRoleData","isLoading","isError","error","refetch","useGetEmployeeRoleQuery","search","addEmployeeRole","useAddEmployeeRoleMutation","useEffect","pagination","moduleAccess","status","handleSearch","then","Header","accessor","Cell","_ref","_ref2","FetchLoader","ServerError","FaPlus","xxl","xl","lg","sm","md","BsSearch","type","placeholder","onChange","onKeyPress","handleClear","BsX","Spinner","as","animation","BasicTable","NoAccess","Modal","show","onHide","centered","closeButton","Title","Body","Form","Group","controlId","Label","Control","Footer","variant","async","response","nameOfRole","toast","success","message","autoClose","console"],"sourceRoot":""}